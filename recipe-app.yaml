AWSTemplateFormatVersion: '2010-09-09'
Description: Option 1 - Recipe Sharing Application Platform using HTTPS
Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t2.small
      - t3.small
    ConstraintDescription: must be a valid EC2 instance type.

  LatestAmiId:
    Description: AMI for EC2 instance
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id

  ALBCertificateArn:
    Type: String
    Description: The ARN of the SSL certificate for the Application Load Balancer

  GitRepoURL:
    Type: String
    Description: URL of the Git repository to clone
    Default: https://github.com/PacktPublishing/AWS-Cloud-Projects.git

Resources:

      # DATA LAYER
      RecipesTable:
        Type: AWS::DynamoDB::Table
        Properties:
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          BillingMode: PAY_PER_REQUEST
          TableName: recipes

      # IAM
      EC2InstanceRolePolicy:
        Type: AWS::IAM::ManagedPolicy
        Properties:
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                Resource:
                  - Fn::GetAtt:
                      - RecipesTable
                      - Arn

      EC2InstanceRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - ec2.amazonaws.com
                Action:
                  - sts:AssumeRole
          ManagedPolicyArns:
            - Ref: EC2InstanceRolePolicy
            - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

      EC2InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
          Roles:
            - Ref: EC2InstanceRole

      # VPC
      VPC:
        Type: AWS::EC2::VPC
        Properties:
          CidrBlock: 10.0.0.0/16
          EnableDnsHostnames: true
          EnableDnsSupport: true
          InstanceTenancy: default
          Tags:
            - Key: Name
              Value: Chapter 3 VPC

      InternetGateway:
        Type: AWS::EC2::InternetGateway

      InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
          VpcId:
            Ref: VPC
          InternetGatewayId:
            Ref: InternetGateway

      # Private subnets
      PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId:
            Ref: VPC
          AvailabilityZone:
            Fn::Select:
              - 0
              - Fn::GetAZs:
                  Ref: AWS::Region
          CidrBlock: 10.0.2.0/24
          MapPublicIpOnLaunch: false
          Tags:
            - Key: Name
              Value: Private Subnet 1

      PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId:
            Ref: VPC
          AvailabilityZone:
            Fn::Select:
              - 1
              - Fn::GetAZs:
                  Ref: AWS::Region
          CidrBlock: 10.0.3.0/24
          MapPublicIpOnLaunch: false
          Tags:
            - Key: Name
              Value: Private Subnet 2

      PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId:
            Ref: VPC
          Tags:
            - Key: Name
              Value: Private Route Table

      PrivateSubnetRouteTableAssociation1:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId:
            Ref: PrivateSubnet1
          RouteTableId:
            Ref: PrivateRouteTable

      PrivateSubnetRouteTableAssociation2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId:
            Ref: PrivateSubnet2
          RouteTableId:
            Ref: PrivateRouteTable

      # Public subnets and routes
      PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId:
            Ref: VPC
          AvailabilityZone:
            Fn::Select:
              - 0
              - Fn::GetAZs:
                  Ref: AWS::Region
          CidrBlock: 10.0.0.0/24
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: Public Subnet 1

      PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId:
            Ref: VPC
          AvailabilityZone:
            Fn::Select:
              - 1
              - Fn::GetAZs:
                  Ref: AWS::Region
          CidrBlock: 10.0.1.0/24
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: Public Subnet 2

      PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId:
            Ref: VPC
          Tags:
            - Key: Name
              Value: Public Route Table

      PublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
          RouteTableId:
            Ref: PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId:
            Ref: InternetGateway

      PublicSubnetRouteTableAssociation1:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId:
            Ref: PublicSubnet1
          RouteTableId:
            Ref: PublicRouteTable

      PublicSubnetRouteTableAssociation2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId:
            Ref: PublicSubnet2
          RouteTableId:
            Ref: PublicRouteTable

      # NAT Gateway
      NatGatewayEIP:
        Type: AWS::EC2::EIP
        Properties:
          Domain: vpc

      NatGateway:
        Type: AWS::EC2::NatGateway
        Properties:
          AllocationId:
            Fn::GetAtt:
              - NatGatewayEIP
              - AllocationId
          SubnetId:
            Ref: PublicSubnet1

      PrivateRoute:
        Type: AWS::EC2::Route
        DependsOn: NatGateway
        Properties:
          RouteTableId:
            Ref: PrivateRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId:
            Ref: NatGateway

      # SECURITY GROUPS
      ALBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow HTTPS
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 443
              ToPort: 443
              CidrIp: 0.0.0.0/0
          VpcId:
            Ref: VPC

      EC2InstanceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow HTTP from ALB
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              SourceSecurityGroupId:
                Ref: ALBSecurityGroup
          VpcId:
            Ref: VPC

      # EC2 INSTANCE
      EC2Instance:
        Type: AWS::EC2::Instance
        Properties:
          ImageId:
            Ref: LatestAmiId
          InstanceType:
            Ref: InstanceType
          IamInstanceProfile:
            Ref: EC2InstanceProfile
          NetworkInterfaces:
            - DeviceIndex: '0'
              GroupSet:
                - Ref: EC2InstanceSecurityGroup
              SubnetId:
                Ref: PrivateSubnet1
          UserData:
            Fn::Base64:
              Fn::Sub: |
                #!/bin/bash
                sudo apt update
                sudo apt install -y python3 python3-pip python3-virtualenv nginx jq
                git clone ${GitRepoURL}
                cp -r $(echo "${GitRepoURL}" | sed 's/.*\///' | sed 's/\.git//')/chapter3/code/backend . ; rm -rf $(echo "${GitRepoURL}" | sed 's/.*\///' | sed 's/\.git//') ; cd backend

                sed -i "s/SELECTED_REGION/$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region')/g" main.py

                # Create an Nginx configuration file
                cat << EOF > /etc/nginx/sites-available/fastapi
                server {
                listen 80;
                server_name ~.;
                location / {
                proxy_pass http://localhost:8000;
                }
                }
                EOF

                sudo ln -s /etc/nginx/sites-available/fastapi /etc/nginx/sites-enabled/
                sudo systemctl restart nginx
                virtualenv .venv
                source .venv/bin/activate
                pip install -r requirements.txt
                python3 -m uvicorn main:app &

      # ALB
      ApplicationLoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Scheme: internet-facing
          SecurityGroups:
            - Ref: ALBSecurityGroup
          Subnets:
            - Ref: PublicSubnet1
            - Ref: PublicSubnet2

      ALBListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
            - Type: forward
              TargetGroupArn:
                Ref: ALBTargetGroup
          LoadBalancerArn:
            Ref: ApplicationLoadBalancer
          Port: 443
          Protocol: HTTPS
          Certificates:
            - CertificateArn:
                Ref: ALBCertificateArn
          SslPolicy: ELBSecurityPolicy-2016-08

      ALBTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckPath: /health
          Port: 80
          Protocol: HTTP
          TargetType: instance
          Targets:
            - Id:
                Ref: EC2Instance
              Port: 80
          VpcId:
            Ref: VPC

      # FRONTEND
      S3Bucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName:
            Fn::Sub: "dlittle-chapter3-frontend-${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"
          AccessControl: Private
          PublicAccessBlockConfiguration:
            BlockPublicAcls: true
            BlockPublicPolicy: true
            IgnorePublicAcls: true
            RestrictPublicBuckets: true
          WebsiteConfiguration:
            IndexDocument: index.html

      CloudFrontOriginAccessIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
          CloudFrontOriginAccessIdentityConfig:
            Comment:
              Fn::Sub: "Origin Access Identity for ${AWS::StackName}"

      S3BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          Bucket:
            Ref: S3Bucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  AWS:
                    Fn::Sub: "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity.Id}"
                Action: 's3:GetObject'
                Resource:
                  Fn::Sub: "${S3Bucket.Arn}/*"
      CloudFrontDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
          DistributionConfig:
            Enabled: true
            DefaultCacheBehavior:
              TargetOriginId:
                Fn::Sub: "origin-${AWS::StackName}"
              ViewerProtocolPolicy: redirect-to-https
              ForwardedValues:
                QueryString: false
            CustomErrorResponses:
              - ErrorCode: 403
                ResponseCode: 200
                ResponsePagePath: /
                ErrorCachingMinTTL: 0
            DefaultRootObject: index.html
            HttpVersion: 'http2'
            IPV6Enabled: true
            Origins:
              - Id:
                  Fn::Sub: "origin-${AWS::StackName}"
                DomainName:
                  Fn::GetAtt:
                    - S3Bucket
                    - RegionalDomainName
                S3OriginConfig:
                  OriginAccessIdentity:
                    Fn::Sub: "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity.Id}"
            PriceClass: PriceClass_100
            ViewerCertificate:
              CloudFrontDefaultCertificate: true

Outputs:

  CloudFrontDistributionUrl:
        Description: URL of the CloudFront distribution to access our frontend
        Value:
          Fn::GetAtt:
            - CloudFrontDistribution
            - DomainName
        Export:
          Name:
            Fn::Sub: "${AWS::StackName}-CloudFrontDistributionUrl"

  CloudFrontDistributionId:
        Description: The CloudFront Distribution ID
        Value:
          Ref: CloudFrontDistribution

  ApplicationLoadBalancerDNSName:
        Description: The DNS name of the Application Load Balancer
        Value:
          Fn::GetAtt:
            - ApplicationLoadBalancer
            - DNSName
        Export:
          Name:
            Fn::Sub: "${AWS::StackName}-ApplicationLoadBalancerDNSName"